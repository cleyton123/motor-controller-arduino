// Definições dos pinos dos motores
int IN1 = 2;
int IN2 = 3;
int ENA = 11;  // PWM
int IN3 = 4;
int IN4 = 5;
int ENB = 10;  // PWM

// HC-SR04 (sensor de distância)
int trig = 6;
int eco = 7;

//Definição do pino do buzzer
int buzzer = 9;

// Variáveis para tempo e distância
long duracao;
float distancia;

// Velocidade dos motores (0 a 255)
const int velocidadeMotores = 200;

void setup()
{
  Serial.begin(9600);

  // Configura pinos dos motores como saída
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);

  // Configura pinos do sensor HC-SR04
  pinMode(trig, OUTPUT);
  pinMode(eco, INPUT);
  
  //configura pino do buzzer
  pinMode(buzzer,OUTPUT);

  desligarmotor();
  delay(100);
}

// Função para ligar motores para frente 
void ligarmotor(){
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, velocidadeMotores);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, velocidadeMotores);
}

// Função para desligar motores 
void desligarmotor(){
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);      
}

// Andar para frente
void andarFrente() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, velocidadeMotores);

  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, velocidadeMotores);
}

// Parar
void parar() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 0);

  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, 0);
}

// Ré por 1 segundo
void andarRe() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, velocidadeMotores);

  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENB, velocidadeMotores);
}

// Girar para a esquerda (pivô direito)
void girarEsquerda() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, velocidadeMotores);

  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, velocidadeMotores);
}

// Ativar o buzzer
void buzzerON() {
  digitalWrite(buzzer, HIGH);
}

// Desativar o buzzer
void buzzerOFF() {
  digitalWrite(buzzer, LOW);
}

// Manobra de desvio quando detectar obstáculo
void manobraDesvio() {
  parar();
  delay(300);

  andarRe();
  delay(700);

  girarEsquerda();
  delay(600);

  parar();
  delay(300);
}

void loop()
{ 
  digitalWrite(trig,LOW);
  delay(2);
  digitalWrite(trig,HIGH);
  delay(2);
  digitalWrite(trig,LOW);
  
  duracao = pulseIn(eco,HIGH,30000UL);
  distancia = (duracao*0.0343)/2;

  if (distancia >= 40){ 
     buzzerOFF();
    andarFrente();
      Serial.println("Distância maior que 40 cm -> LIGANDO motores");
  }else{ 
    buzzerON();
    manobraDesvio();
       Serial.println("Distância <= 40 cm -> DESLIGANDO motores");    
  }
  // Exibe informações no Serial
  Serial.print("Distância (cm): ");
  Serial.print(distancia);
  Serial.print(" | Tempo eco (us): ");
  Serial.println(duracao);
  
  delay(2000);
}
